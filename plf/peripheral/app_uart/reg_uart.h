#ifndef __REG_UART_H__
#define __REG_UART_H__
#include <stdint.h>

typedef struct
{
    volatile uint32_t RBR_THR_DLL;
    volatile uint32_t DLH_IER;
    volatile uint32_t IIR_FCR;
    volatile uint32_t LCR;
    volatile uint32_t MCR;
    volatile uint32_t LSR;
    volatile uint32_t MSR;
    volatile uint32_t SCR;
    volatile uint32_t LPDLL;
    volatile uint32_t LPDLH;
    volatile uint32_t reserved0[2];
    volatile uint32_t SRBR0_STHR0;
    volatile uint32_t SRBR1_STHR1;
    volatile uint32_t SRBR2_STHR2;
    volatile uint32_t SRBR3_STHR3;
    volatile uint32_t SRBR4_STHR4;
    volatile uint32_t SRBR5_STHR5;
    volatile uint32_t SRBR6_STHR6;
    volatile uint32_t SRBR7_STHR7;
    volatile uint32_t SRBR8_STHR8;
    volatile uint32_t SRBR9_STHR9;
    volatile uint32_t SRBR10_STHR10;
    volatile uint32_t SRBR11_STHR11;
    volatile uint32_t SRBR12_STHR12;
    volatile uint32_t SRBR13_STHR13;
    volatile uint32_t SRBR14_STHR14;
    volatile uint32_t SRBR15_STHR15;
    volatile uint32_t FAR;
    volatile uint32_t TFR;
    volatile uint32_t RFW;
    volatile uint32_t USR;
    volatile uint32_t TFL;
    volatile uint32_t RFL;
    volatile uint32_t SRR;
    volatile uint32_t reserved1[6];
    volatile uint32_t HTX;
    volatile uint32_t DMASA;
    volatile uint32_t reserved2[18];
    volatile uint32_t CPR;
    volatile uint32_t UCV;
}reg_uart_t;

enum UART_RBR_THR_DLL_FIELD
{
    UART_RBR_MSB_9THBIT_MASK = 0x100,
    UART_RBR_MSB_9THBIT_POS = 8,
    UART_RBR_LSB_8BITS_MASK = 0xff,
    UART_RBR_LSB_8BITS_POS = 0,
    UART_THR_MSB_9THBIT_MASK = 0x100,
    UART_THR_MSB_9THBIT_POS = 8,
    UART_THR_LSB_8BITS_MASK = 0xff,
    UART_THR_LSB_8BITS_POS = 0,
    UART_DIVISOR_LATCH_LOW_MASK = 0xff,
    UART_DIVISOR_LATCH_LOW_POS = 0,
};

enum UART_DLH_IER_FIELD
{
    UART_DIVISOR_LATCH_HIGH_MASK = 0xff,
    UART_DIVISOR_LATCH_HIGH_POS = 0,
    UART_PTIME_MASK = 0x80,
    UART_PTIME_POS = 7,
    UART_EDSSI_MASK = 0x8,
    UART_EDSSI_POS = 3,
    UART_ELSI_MASK = 0x4,
    UART_ELSI_POS = 2,
    UART_ETBEI_MASK = 0x2,
    UART_ETBEI_POS = 1,
    UART_ERBFI_MASK = 0x1,
    UART_ERBFI_POS = 0,
};

enum UART_IIR_FCR_FIELD
{
    UART_FIFOSE_MASK = 0xc0,
    UART_FIFOSE_POS = 6,
    UART_IID_MASK = 0xf,
    UART_IID_POS = 0,
    UART_RCVR_MASK = 0xc0,
    UART_RCVR_POS = 6,
    UART_TET_MASK = 0x30,
    UART_TET_POS = 4,
    UART_DMAM_MASK = 0x8,
    UART_DMAM_POS = 3,
    UART_XFIFOR_MASK = 0x4,
    UART_XFIFOR_POS = 2,
    UART_RFIFOR_MASK = 0x2,
    UART_RFIFOR_POS = 1,
    UART_FIFOE_MASK = 0x1,
    UART_FIFOE_POS = 0,
};

enum UART_LCR_FIELD
{
    UART_DLAB_MASK = 0x80,
    UART_DLAB_POS = 7,
    UART_BREAK__MASK = 0x40,
    UART_BREAK__POS = 6,
    UART_STICK_PARITY_MASK = 0x20,
    UART_STICK_PARITY_POS = 5,
    UART_EPS_MASK = 0x10,
    UART_EPS_POS = 4,
    UART_PEN_MASK = 0x8,
    UART_PEN_POS = 3,
    UART_STOP_MASK = 0x4,
    UART_STOP_POS = 2,
    UART_DLS_MASK = 0x3,
    UART_DLS_POS = 0,
};

enum UART_MCR_FIELD
{
    UART_SIRE_MASK = 0x40,
    UART_SIRE_POS = 6,
    UART_AFCE_MASK = 0x20,
    UART_AFCE_POS = 5,
    UART_LOOPBACK_MASK = 0x10,
    UART_LOOPBACK_POS = 4,
    UART_OUT2_MASK = 0x8,
    UART_OUT2_POS = 3,
    UART_OUT1_MASK = 0x4,
    UART_OUT1_POS = 2,
    UART_RTS_MASK = 0x2,
    UART_RTS_POS = 1,
    UART_DTR_MASK = 0x1,
    UART_DTR_POS = 0,
};

enum UART_LSR_FIELD
{
    UART_ADDR_RCVD_MASK = 0x100,
    UART_ADDR_RCVD_POS = 8,
    UART_RFE_MASK = 0x80,
    UART_RFE_POS = 7,
    UART_TEMT_MASK = 0x40,
    UART_TEMT_POS = 6,
    UART_THRE_MASK = 0x20,
    UART_THRE_POS = 5,
    UART_BI_MASK = 0x10,
    UART_BI_POS = 4,
    UART_FE_MASK = 0x8,
    UART_FE_POS = 3,
    UART_PE_MASK = 0x4,
    UART_PE_POS = 2,
    UART_OE_MASK = 0x2,
    UART_OE_POS = 1,
    UART_DR_MASK = 0x1,
    UART_DR_POS = 0,
};

enum UART_MSR_FIELD
{
    UART_DCD_MASK = 0x80,
    UART_DCD_POS = 7,
    UART_RI_MASK = 0x40,
    UART_RI_POS = 6,
    UART_DSR_MASK = 0x20,
    UART_DSR_POS = 5,
    UART_CTS_MASK = 0x10,
    UART_CTS_POS = 4,
    UART_DDCD_MASK = 0x8,
    UART_DDCD_POS = 3,
    UART_TERI_MASK = 0x4,
    UART_TERI_POS = 2,
    UART_DDSR_MASK = 0x2,
    UART_DDSR_POS = 1,
    UART_DCTS_MASK = 0x1,
    UART_DCTS_POS = 0,
};

enum UART_SCR_FIELD
{
    UART_SCRATCHPAD_MASK = 0xff,
    UART_SCRATCHPAD_POS = 0,
};

enum UART_LPDLL_FIELD
{
    UART_LPDLL_MASK = 0xff,
    UART_LPDLL_POS = 0,
};

enum UART_LPDLH_FIELD
{
    UART_LPDLH_MASK = 0xff,
    UART_LPDLH_POS = 0,
};

enum UART_SRBR0_STHR0_FIELD
{
    UART_SRBR0_MSB_9THBIT_MASK = 0x100,
    UART_SRBR0_MSB_9THBIT_POS = 8,
    UART_SRBR0_LSB_8BITS_MASK = 0xff,
    UART_SRBR0_LSB_8BITS_POS = 0,
    UART_STHR0_MSB_9THBIT_MASK = 0x100,
    UART_STHR0_MSB_9THBIT_POS = 8,
    UART_STHR0_LSB_8BITS_MASK = 0xff,
    UART_STHR0_LSB_8BITS_POS = 0,
};

enum UART_SRBR1_STHR1_FIELD
{
    UART_SRBR1_MSB_9THBIT_MASK = 0x100,
    UART_SRBR1_MSB_9THBIT_POS = 8,
    UART_SRBR1_LSB_8BITS_MASK = 0xff,
    UART_SRBR1_LSB_8BITS_POS = 0,
    UART_STHR1_MSB_9THBIT_MASK = 0x100,
    UART_STHR1_MSB_9THBIT_POS = 8,
    UART_STHR1_LSB_8BITS_MASK = 0xff,
    UART_STHR1_LSB_8BITS_POS = 0,
};

enum UART_SRBR2_STHR2_FIELD
{
    UART_SRBR2_MSB_9THBIT_MASK = 0x100,
    UART_SRBR2_MSB_9THBIT_POS = 8,
    UART_SRBR2_LSB_8BITS_MASK = 0xff,
    UART_SRBR2_LSB_8BITS_POS = 0,
    UART_STHR2_MSB_9THBIT_MASK = 0x100,
    UART_STHR2_MSB_9THBIT_POS = 8,
    UART_STHR2_LSB_8BITS_MASK = 0xff,
    UART_STHR2_LSB_8BITS_POS = 0,
};

enum UART_SRBR3_STHR3_FIELD
{
    UART_SRBR3_MSB_9THBIT_MASK = 0x100,
    UART_SRBR3_MSB_9THBIT_POS = 8,
    UART_SRBR3_LSB_8BITS_MASK = 0xff,
    UART_SRBR3_LSB_8BITS_POS = 0,
    UART_STHR3_MSB_9THBIT_MASK = 0x100,
    UART_STHR3_MSB_9THBIT_POS = 8,
    UART_STHR3_LSB_8BITS_MASK = 0xff,
    UART_STHR3_LSB_8BITS_POS = 0,
};

enum UART_SRBR4_STHR4_FIELD
{
    UART_SRBR4_MSB_9THBIT_MASK = 0x100,
    UART_SRBR4_MSB_9THBIT_POS = 8,
    UART_SRBR4_LSB_8BITS_MASK = 0xff,
    UART_SRBR4_LSB_8BITS_POS = 0,
    UART_STHR4_MSB_9THBIT_MASK = 0x100,
    UART_STHR4_MSB_9THBIT_POS = 8,
    UART_STHR4_LSB_8BITS_MASK = 0xff,
    UART_STHR4_LSB_8BITS_POS = 0,
};

enum UART_SRBR5_STHR5_FIELD
{
    UART_SRBR5_MSB_9THBIT_MASK = 0x100,
    UART_SRBR5_MSB_9THBIT_POS = 8,
    UART_SRBR5_LSB_8BITS_MASK = 0xff,
    UART_SRBR5_LSB_8BITS_POS = 0,
    UART_STHR5_MSB_9THBIT_MASK = 0x100,
    UART_STHR5_MSB_9THBIT_POS = 8,
    UART_STHR5_LSB_8BITS_MASK = 0xff,
    UART_STHR5_LSB_8BITS_POS = 0,
};

enum UART_SRBR6_STHR6_FIELD
{
    UART_SRBR6_MSB_9THBIT_MASK = 0x100,
    UART_SRBR6_MSB_9THBIT_POS = 8,
    UART_SRBR6_LSB_8BITS_MASK = 0xff,
    UART_SRBR6_LSB_8BITS_POS = 0,
    UART_STHR6_MSB_9THBIT_MASK = 0x100,
    UART_STHR6_MSB_9THBIT_POS = 8,
    UART_STHR6_LSB_8BITS_MASK = 0xff,
    UART_STHR6_LSB_8BITS_POS = 0,
};

enum UART_SRBR7_STHR7_FIELD
{
    UART_SRBR7_MSB_9THBIT_MASK = 0x100,
    UART_SRBR7_MSB_9THBIT_POS = 8,
    UART_SRBR7_LSB_8BITS_MASK = 0xff,
    UART_SRBR7_LSB_8BITS_POS = 0,
    UART_STHR7_MSB_9THBIT_MASK = 0x100,
    UART_STHR7_MSB_9THBIT_POS = 8,
    UART_STHR7_LSB_8BITS_MASK = 0xff,
    UART_STHR7_LSB_8BITS_POS = 0,
};

enum UART_SRBR8_STHR8_FIELD
{
    UART_SRBR8_MSB_9THBIT_MASK = 0x100,
    UART_SRBR8_MSB_9THBIT_POS = 8,
    UART_SRBR8_LSB_8BITS_MASK = 0xff,
    UART_SRBR8_LSB_8BITS_POS = 0,
    UART_STHR8_MSB_9THBIT_MASK = 0x100,
    UART_STHR8_MSB_9THBIT_POS = 8,
    UART_STHR8_LSB_8BITS_MASK = 0xff,
    UART_STHR8_LSB_8BITS_POS = 0,
};

enum UART_SRBR9_STHR9_FIELD
{
    UART_SRBR9_MSB_9THBIT_MASK = 0x100,
    UART_SRBR9_MSB_9THBIT_POS = 8,
    UART_SRBR9_LSB_8BITS_MASK = 0xff,
    UART_SRBR9_LSB_8BITS_POS = 0,
    UART_STHR9_MSB_9THBIT_MASK = 0x100,
    UART_STHR9_MSB_9THBIT_POS = 8,
    UART_STHR9_LSB_8BITS_MASK = 0xff,
    UART_STHR9_LSB_8BITS_POS = 0,
};

enum UART_SRBR10_STHR10_FIELD
{
    UART_SRBR10_MSB_9THBIT_MASK = 0x100,
    UART_SRBR10_MSB_9THBIT_POS = 8,
    UART_SRBR10_LSB_8BITS_MASK = 0xff,
    UART_SRBR10_LSB_8BITS_POS = 0,
    UART_STHR10_MSB_9THBIT_MASK = 0x100,
    UART_STHR10_MSB_9THBIT_POS = 8,
    UART_STHR10_LSB_8BITS_MASK = 0xff,
    UART_STHR10_LSB_8BITS_POS = 0,
};

enum UART_SRBR11_STHR11_FIELD
{
    UART_SRBR11_MSB_9THBIT_MASK = 0x100,
    UART_SRBR11_MSB_9THBIT_POS = 8,
    UART_SRBR11_LSB_8BITS_MASK = 0xff,
    UART_SRBR11_LSB_8BITS_POS = 0,
    UART_STHR11_MSB_9THBIT_MASK = 0x100,
    UART_STHR11_MSB_9THBIT_POS = 8,
    UART_STHR11_LSB_8BITS_MASK = 0xff,
    UART_STHR11_LSB_8BITS_POS = 0,
};

enum UART_SRBR12_STHR12_FIELD
{
    UART_SRBR12_MSB_9THBIT_MASK = 0x100,
    UART_SRBR12_MSB_9THBIT_POS = 8,
    UART_SRBR12_LSB_8BITS_MASK = 0xff,
    UART_SRBR12_LSB_8BITS_POS = 0,
    UART_STHR12_MSB_9THBIT_MASK = 0x100,
    UART_STHR12_MSB_9THBIT_POS = 8,
    UART_STHR12_LSB_8BITS_MASK = 0xff,
    UART_STHR12_LSB_8BITS_POS = 0,
};

enum UART_SRBR13_STHR13_FIELD
{
    UART_SRBR13_MSB_9THBIT_MASK = 0x100,
    UART_SRBR13_MSB_9THBIT_POS = 8,
    UART_SRBR13_LSB_8BITS_MASK = 0xff,
    UART_SRBR13_LSB_8BITS_POS = 0,
    UART_STHR13_MSB_9THBIT_MASK = 0x100,
    UART_STHR13_MSB_9THBIT_POS = 8,
    UART_STHR13_LSB_8BITS_MASK = 0xff,
    UART_STHR13_LSB_8BITS_POS = 0,
};

enum UART_SRBR14_STHR14_FIELD
{
    UART_SRBR14_MSB_9THBIT_MASK = 0x100,
    UART_SRBR14_MSB_9THBIT_POS = 8,
    UART_SRBR14_LSB_8BITS_MASK = 0xff,
    UART_SRBR14_LSB_8BITS_POS = 0,
    UART_STHR14_MSB_9THBIT_MASK = 0x100,
    UART_STHR14_MSB_9THBIT_POS = 8,
    UART_STHR14_LSB_8BITS_MASK = 0xff,
    UART_STHR14_LSB_8BITS_POS = 0,
};

enum UART_SRBR15_STHR15_FIELD
{
    UART_SRBR15_MSB_9THBIT_MASK = 0x100,
    UART_SRBR15_MSB_9THBIT_POS = 8,
    UART_SRBR15_LSB_8BITS_MASK = 0xff,
    UART_SRBR15_LSB_8BITS_POS = 0,
    UART_STHR15_MSB_9THBIT_MASK = 0x100,
    UART_STHR15_MSB_9THBIT_POS = 8,
    UART_STHR15_LSB_8BITS_MASK = 0xff,
    UART_STHR15_LSB_8BITS_POS = 0,
};

enum UART_FAR_FIELD
{
    UART_FIFO_ACCESS_MODE_MASK = 0x1,
    UART_FIFO_ACCESS_MODE_POS = 0,
};

enum UART_TFR_FIELD
{
    UART_TRANSMIT_FIFO_READ_MASK = 0xff,
    UART_TRANSMIT_FIFO_READ_POS = 0,
};

enum UART_RFW_FIELD
{
    UART_RFFE_MASK = 0x200,
    UART_RFFE_POS = 9,
    UART_RFPE_MASK = 0x100,
    UART_RFPE_POS = 8,
    UART_RFWD_MASK = 0xff,
    UART_RFWD_POS = 0,
};

enum UART_USR_FIELD
{
    UART_RFF_MASK = 0x10,
    UART_RFF_POS = 4,
    UART_RFNE_MASK = 0x8,
    UART_RFNE_POS = 3,
    UART_TFE_MASK = 0x4,
    UART_TFE_POS = 2,
    UART_TFNF_MASK = 0x2,
    UART_TFNF_POS = 1,
    UART_BUSY_MASK = 0x1,
    UART_BUSY_POS = 0,
};

enum UART_TFL_FIELD
{
    UART_TRANSMIT_FIFO_LEVEL_MASK = 0xffff,
    UART_TRANSMIT_FIFO_LEVEL_POS = 0,
};

enum UART_RFL_FIELD
{
    UART_RECEIVE_FIFO_LEVEL_MASK = 0xffff,
    UART_RECEIVE_FIFO_LEVEL_POS = 0,
};

enum UART_SRR_FIELD
{
    UART_XFR_MASK = 0x4,
    UART_XFR_POS = 2,
    UART_RFR_MASK = 0x2,
    UART_RFR_POS = 1,
    UART_UR_MASK = 0x1,
    UART_UR_POS = 0,
};

enum UART_HTX_FIELD
{
    UART_HALT_TX_MASK = 0x1,
    UART_HALT_TX_POS = 0,
};

enum UART_DMASA_FIELD
{
    UART_DMASA_MASK = 0x1,
    UART_DMASA_POS = 0,
};

enum UART_CPR_FIELD
{
    UART_FIFO_MODE_MASK = 0xff0000,
    UART_FIFO_MODE_POS = 16,
    UART_DMA_EXTRA_MASK = 0x2000,
    UART_DMA_EXTRA_POS = 13,
    UART_UART_ADD_ENCODED_PARAMS_MASK = 0x1000,
    UART_UART_ADD_ENCODED_PARAMS_POS = 12,
    UART_SHADOW_MASK = 0x800,
    UART_SHADOW_POS = 11,
    UART_FIFO_STAT_MASK = 0x400,
    UART_FIFO_STAT_POS = 10,
    UART_FIFO_ACCESS_MASK = 0x200,
    UART_FIFO_ACCESS_POS = 9,
    UART_NEW_FEAT_MASK = 0x100,
    UART_NEW_FEAT_POS = 8,
    UART_SIR_LP_MODE_MASK = 0x80,
    UART_SIR_LP_MODE_POS = 7,
    UART_SIR_MODE_MASK = 0x40,
    UART_SIR_MODE_POS = 6,
    UART_THRE_MODE_MASK = 0x20,
    UART_THRE_MODE_POS = 5,
    UART_AFCE_MODE_MASK = 0x10,
    UART_AFCE_MODE_POS = 4,
    UART_APB_DATA_WIDTH_MASK = 0x3,
    UART_APB_DATA_WIDTH_POS = 0,
};

enum UART_UCV_FIELD
{
    UART_UART_COMPONENT_VERSION_MASK = (int)0xffffffffL,
    UART_UART_COMPONENT_VERSION_POS = 0,
};

#endif
